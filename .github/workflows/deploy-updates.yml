name: Deploy Updates from Tauri App Releases

on:
  workflow_dispatch:
  repository_dispatch:
    types: [publish]

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - app: yapuka
            repo: breezeapps/Yapuka

    env:
      GH_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}

    steps:
      - name: 📦 Checkout this update repo (tauri-updates)
        uses: actions/checkout@v4

      - name: 🛠️ Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: 🔐 Auth GH CLI + Get tag
        env:
            GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        run: |
            tag=$(gh release view --repo "${{ matrix.repo }}" --json tagName -q '.tagName')
            echo "tag=$tag" >> $GITHUB_OUTPUT


      - name: 🧠 Get latest release tag
        id: get-tag
        env:
            GH_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        run: |
            tag=$(gh release view --repo "${{ matrix.repo }}" --json tagName -q '.tagName')
            echo "tag=$tag" >> $GITHUB_OUTPUT


      - name: 📥 Download release assets
        id: download-assets
        env:
            GH_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        run: |
            mkdir -p updates/${{ matrix.app }}
            gh release download ${{ steps.get-tag.outputs.tag }} \
            --repo "${{ matrix.repo }}" \
            --skip-existing \
            --dir "updates/${{ matrix.app }}"

      - name: 🧠 Générer latest.json (auto, multiplateforme)
        run: |
            cd updates/${{ matrix.app }}

            VERSION="${{ steps.get-tag.outputs.tag }}"
            VERSION="${VERSION#v}"

            # Dictionnaire nom → plateforme
            detect_platform() {
            local file="$1"
            case "$file" in
                *.AppImage) echo "linux-x86_64" ;;
                *.deb) echo "linux-deb-x86_64" ;;
                *.rpm) echo "linux-rpm-x86_64" ;;
                *x64-setup.exe|*.exe) echo "windows-x86_64" ;;
                *.msi) echo "windows-msi-x86_64" ;;
                *x64.dmg) echo "darwin-x86_64" ;;
                *aarch64.dmg) echo "darwin-aarch64" ;;
                *x64.app.tar.gz) echo "darwin-x86_64" ;;
                *aarch64.app.tar.gz) echo "darwin-aarch64" ;;
                *) echo "" ;;
            esac
            }

            JSON='{
            "version": "'"$VERSION"'",
            "platforms": {'

            FIRST=1

            for file in *; do
            [[ -f "$file" ]] || continue
            [[ "$file" == *.sig ]] && continue

            platform=$(detect_platform "$file")
            [[ -z "$platform" ]] && continue

            # Cherche la signature correspondante
            sig_file="$file.sig"
            if [[ ! -f "$sig_file" ]]; then
                sig_file=$(ls *.sig | grep -F "$file.sig" || ls *.sig | head -n 1)
            fi

            signature=$(cat "$sig_file" 2>/dev/null || echo "")

            if [[ -n "$signature" ]]; then
                [[ $FIRST -eq 0 ]] && JSON+=","
                JSON+="
                \"$platform\": {
                \"signature\": \"$signature\",
                \"url\": \"https://breezeapps.marvideo.fr/updates/${{ matrix.app }}/$file\"
                }"
                FIRST=0
            fi
            done

            JSON+="
              }
            }"

            echo "$JSON" > latest.json

      - name: 🚀 Commit and push updates
        uses: EndBug/add-and-commit@v9
        with:
            add: 'updates/${{ matrix.app }}/*'

            default_author: github_actions